datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id Int @id @default(autoincrement())

    name     String
    phone    String @unique
    email    String @unique
    password String

    cart   Cart?
    orders Order[]

    role UserRole @default(USER)

    provider   String?
    providerId String?

    verified         DateTime?
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String @unique
    imageUrl String

    variants Variant[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Variant {
    id Int @id @default(autoincrement())

    price   Int
    rrp     Int?
    thumbs  Json
    article String?

    compositions Composition[] @relation("VariantToComposition")
    styles       Style[]       @relation("VariantToStyle")
    colors       Color[]       @relation("VariantToColor")
    sizes        Size[]
    cartItems    CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Size {
    id Int @id @default(autoincrement())

    size     Int
    quantity Int

    variant   Variant @relation(fields: [variantId], references: [id])
    variantId Int

    createdAt DateTime @default(now())
}

model Composition {
    id Int @id @default(autoincrement())

    name String @unique

    variants Variant[] @relation("VariantToComposition")

    createdAt DateTime @default(now())
}

model Style {
    id Int @id @default(autoincrement())

    name String

    variants Variant[] @relation("VariantToStyle")

    createdAt DateTime @default(now())
}

model Color {
    id Int @id @default(autoincrement())

    name String

    variants Variant[] @relation("VariantToColor")

    createdAt DateTime @default(now())
}

model Cart {
    id Int @id @default(autoincrement())

    items CartItem[]

    token String

    totalAmount Int @default(0)

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    quantity Int @default(1)

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    variant   Variant @relation(fields: [variantId], references: [id])
    variantId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    name    String
    email   String
    phone   String
    address String
    comment String?
    token   String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])

    userId Int    @unique
    code   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, code])
}

enum UserRole {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}
